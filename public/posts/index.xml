<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - FAKEV</title>
        <link>https://fakev.cn/posts/</link>
        <description>所有文章 | FAKEV</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>lyj@fakev.cn (lyj)</managingEditor>
            <webMaster>lyj@fakev.cn (lyj)</webMaster><lastBuildDate>Wed, 09 Feb 2022 19:15:44 &#43;0800</lastBuildDate><atom:link href="https://fakev.cn/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Vercel免费部署hugo博客</title>
    <link>https://fakev.cn/posts/vercel%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2/</link>
    <pubDate>Wed, 09 Feb 2022 19:15:44 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://fakev.cn/posts/vercel%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2/</guid>
    <description><![CDATA[]]></description>
</item><item>
    <title>甲骨文云自动刷arm(使用railway.app)</title>
    <link>https://fakev.cn/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/</link>
    <pubDate>Mon, 07 Feb 2022 18:35:01 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://fakev.cn/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/</guid>
    <description><![CDATA[实际上，刷机子的原理无非过一会儿发一个包看看能开通不，为了便携且贯彻落实白嫖精神，我使用的是railway部署的，一个免费的PaaS平台ht]]></description>
</item><item>
    <title>Mysql自动备份</title>
    <link>https://fakev.cn/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/</link>
    <pubDate>Mon, 07 Feb 2022 17:54:20 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://fakev.cn/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/</guid>
    <description><![CDATA[有时候，ddos或者各种攻击会导致服务瘫痪，或者当前服务器进入流量黑洞，无法访问，或者管理员手欠不小心删了一些数据，这时候，数据库的备份就显]]></description>
</item><item>
    <title>docker&amp;compose安装</title>
    <link>https://fakev.cn/posts/devops/docker/</link>
    <pubDate>Mon, 07 Feb 2022 17:52:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://fakev.cn/posts/devops/docker/</guid>
    <description><![CDATA[docker-compose我认为是单机管理容器的最佳方案，如果要多机 docker安装 curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun 换源 cat &gt; /etc/docker/daemon.json &lt;&lt;eof { &#34;registry-mirrors&#34;: [&#34;https://jrromknz.mirror.aliyuncs.com&#34;], &#34;exec-opts&#34;:[&#34;native.cgroupdriver=systemd&#34;] } eof systemctl enable docker.service systemctl daemon-reload systemctl]]></description>
</item><item>
    <title>Fly.io 免费PaaS平台，以及哪吒面板的部署</title>
    <link>https://fakev.cn/posts/cloud/fly/</link>
    <pubDate>Mon, 07 Feb 2022 15:06:48 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://fakev.cn/posts/cloud/fly/</guid>
    <description><![CDATA[fly.io 类似于Okteto、Heroku和Railway的PaaS平台。 只能通过CLI登录，对小白可能有些不太友好。 官网：fly.io 免费额度：F]]></description>
</item><item>
    <title>filebeat</title>
    <link>https://fakev.cn/posts/elastic/filebeat/</link>
    <pubDate>Thu, 21 Oct 2021 18:52:55 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://fakev.cn/posts/elastic/filebeat/</guid>
    <description><![CDATA[安装 #deb curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.15.2-amd64.deb sudo dpkg -i filebeat-7.15.2-amd64.deb #rpm curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.15.2-x86_64.rpm sudo rpm -vi filebeat-7.15.2-x86_64.rpm 设置 路径： /var/filebeat/filebeat.yml output.elasticsearch:hosts:[&#34;myEShost:92]]></description>
</item><item>
    <title>go安装</title>
    <link>https://fakev.cn/posts/go/%E5%AE%89%E8%A3%85/</link>
    <pubDate>Thu, 21 Oct 2021 18:52:55 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://fakev.cn/posts/go/%E5%AE%89%E8%A3%85/</guid>
    <description><![CDATA[GOVER=1.17.2 wget golang.google.cn/dl/go${GOVER}.linux-amd64.tar.gz tar -xzf go${GOVER}.linux-amd64.tar.gz mv ./go /usr/local/go echo &#34;export PATH=$PATH:/usr/local/go/bin&#34; &gt;&gt; /etc/profile source /etc/profile rm golang.google.cn/dl/go${GOVER}.linux-amd64.tar.gz go env -w GOPROXY=https://mirrors.cloud.tencent.com/go/ go env -w GOPROXY=http://mirrors.tencentyun.com/go/ export GOPROXY=http://mirrors.tencentyun.com/go/]]></description>
</item><item>
    <title>go请求http</title>
    <link>https://fakev.cn/posts/go/%E8%AF%B7%E6%B1%82-http/</link>
    <pubDate>Thu, 21 Oct 2021 18:52:55 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://fakev.cn/posts/go/%E8%AF%B7%E6%B1%82-http/</guid>
    <description><![CDATA[go提供了一个http包，可以通过这个包方便的进行http请求 import ( &#34;fmt&#34; &#34;io/ioutil&#34; &#34;net/http&#34; &#34;strings&#34; ) // http.Get func httpGet() { resp, err := http.Get(&#34;http://www.baidu.com&#34;) if err != nil { fmt.Println(err) return } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) fmt.Println(string(body)) } func httpPost() { resp, err := http.Post(&#34;http://www.baidu.com&#34;,]]></description>
</item><item>
    <title>mtricbaet</title>
    <link>https://fakev.cn/posts/elastic/metricbeat/</link>
    <pubDate>Thu, 21 Oct 2021 18:52:55 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://fakev.cn/posts/elastic/metricbeat/</guid>
    <description><![CDATA[]]></description>
</item><item>
    <title>webApi fetch使用</title>
    <link>https://fakev.cn/posts/fetch/</link>
    <pubDate>Thu, 21 Oct 2021 18:52:55 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://fakev.cn/posts/fetch/</guid>
    <description><![CDATA[fetch()的功能与 XMLHttpRequest 基本相同，但有三个主要的差异。 （1）fetch()使用 Promise，不使用回调函数，因此大大简化了写法，写起来更简]]></description>
</item></channel>
</rss>
