[{"categories":null,"content":"实际上，刷机子的原理无非过一会儿发一个包看看能开通不，为了便携且贯彻落实白嫖精神，我使用的是railway部署的，一个免费的PaaS平台https://railway.app,每月有5美元免费额度 ","date":"2022-02-07","objectID":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/:0:0","tags":["白嫖","cloud"],"title":"甲骨文云自动刷arm(使用railway.app)","uri":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/"},{"categories":null,"content":"Github地址 https://github.com/lemoex/oci-help ","date":"2022-02-07","objectID":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/:1:0","tags":["白嫖","cloud"],"title":"甲骨文云自动刷arm(使用railway.app)","uri":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/"},{"categories":null,"content":"部署至railway ","date":"2022-02-07","objectID":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/:2:0","tags":["白嫖","cloud"],"title":"甲骨文云自动刷arm(使用railway.app)","uri":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/"},{"categories":null,"content":"建立自己的git仓库 按照网址上的教程配置好oci-help.ini和pem密钥 然后把源码clone下来，把.ini和pem都考进去 再添加个文件，Dockerfile FROMgolang:1.17.6 as builderENV GO111MODULE=on # CGO_ENABLED alpine禁用cgoWORKDIR/appADD go.mod .ADD go.sum .RUN go mod downloadCOPY . .RUN go build -o app ./RUN mkdir publish \u0026\u0026 cp app publishFROMalpineRUN apk add gcompatWORKDIR/app#复制成品到导出镜像COPY --from=builder /app/publish .#COPY --from=builder /app/*.ini ./COPY --from=builder /app/*.pem ./COPY --from=builder /app/1.sh ./ENTRYPOINT [\"sh\", 'echo -e \"2\\n1\\n\" | ./app']","date":"2022-02-07","objectID":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/:2:1","tags":["白嫖","cloud"],"title":"甲骨文云自动刷arm(使用railway.app)","uri":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/"},{"categories":null,"content":"部署至railway.app 注册好railway账号后，选择你的库，部署即可 预计每个月0.18$,四舍五入不要钱 ","date":"2022-02-07","objectID":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/:2:2","tags":["白嫖","cloud"],"title":"甲骨文云自动刷arm(使用railway.app)","uri":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/"},{"categories":null,"content":"效果 ","date":"2022-02-07","objectID":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/:3:0","tags":["白嫖","cloud"],"title":"甲骨文云自动刷arm(使用railway.app)","uri":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/"},{"categories":null,"content":"结论 实际上，用自己的虚拟机部署方便的多= =，用这个平台主要是不怕机子boom，没办法，就是爱折腾 ","date":"2022-02-07","objectID":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/:4:0","tags":["白嫖","cloud"],"title":"甲骨文云自动刷arm(使用railway.app)","uri":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/"},{"categories":null,"content":"有时候，ddos或者各种攻击会导致服务瘫痪，或者当前服务器进入流量黑洞，无法访问，或者管理员手欠不小心删了一些数据，这时候，数据库的备份就显得尤为重要了。 本案例使用的是腾讯云的cos云存储来备份数据库，数据库在docker中的mysql中，每天备份一次，所以数据不是实时的，可以作为兜底使用 ","date":"2022-02-07","objectID":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/:0:0","tags":["devops"],"title":"Mysql自动备份","uri":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"},{"categories":null,"content":"从docker中导出数据库 docker exec mysql bash -c \"mysqldump -uroot -p123456 数据库名\u003e /xxx.sql\" ","date":"2022-02-07","objectID":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/:1:0","tags":["devops"],"title":"Mysql自动备份","uri":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"},{"categories":null,"content":"配置腾讯云cos 网址 https://cloud.tencent.com/document/product/436/63143 ","date":"2022-02-07","objectID":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/:2:0","tags":["devops"],"title":"Mysql自动备份","uri":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"},{"categories":null,"content":"下载 Linux 版本 COSCLI wget https://github.com/tencentyun/coscli/releases/download/v0.10.2-beta/coscli-linux #运行以下命令重命名文件： mv coscli-linux coscli \u0026\u0026 chmod 755 coscli #命令在其他位置为 COSCLI 交互式地生成配置文件 ./coscli config init ~/.cos.yaml cos配置文件 ","date":"2022-02-07","objectID":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/:2:1","tags":["devops"],"title":"Mysql自动备份","uri":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"},{"categories":null,"content":"数据库备份脚本 #/bin/bash cd /root/backup #导出数据库 docker exec mysql bash -c \"mysqldump -uroot -p123456 dbname\u003e /dbname.sql\" #cpoy到本机 docker cp mysql:/dbname.sql ./ #删除docker中的文件 docker exec mysql rm /dbname.sql #提交到腾讯云cos fname=$(date \"+%Y-%m-%d-%H-%M-%S\").sql echo \"开始上传数据库$fname\" ./coscli cp ./dbname.sql cos://dbname-backup/$fname rm ./dbname.sql #提醒 #可以使用各种方式提醒，server酱，短信啥的，我用的是自建server酱，wecomchan，详情bing #删除7天前的备份文件 ./coscli rm cos://bucket1/example/ -r --include \"\" 把这个脚本添加到crontab中，每天执行一次,我用的是宝塔的计划任务 ","date":"2022-02-07","objectID":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/:3:0","tags":["devops"],"title":"Mysql自动备份","uri":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"},{"categories":null,"content":"运行结果 ","date":"2022-02-07","objectID":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/:4:0","tags":["devops"],"title":"Mysql自动备份","uri":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"},{"categories":null,"content":"docker-compose我认为是单机管理容器的最佳方案，如果要多机 ","date":"2022-02-07","objectID":"/posts/devops/docker/:0:0","tags":["devops"],"title":"docker\u0026compose安装","uri":"/posts/devops/docker/"},{"categories":null,"content":"docker安装 curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun ","date":"2022-02-07","objectID":"/posts/devops/docker/:1:0","tags":["devops"],"title":"docker\u0026compose安装","uri":"/posts/devops/docker/"},{"categories":null,"content":"换源 cat \u003e /etc/docker/daemon.json \u003c\u003ceof { \"registry-mirrors\": [\"https://jrromknz.mirror.aliyuncs.com\"], \"exec-opts\":[\"native.cgroupdriver=systemd\"] } eof systemctl enable docker.service systemctl daemon-reload systemctl restart docker.service ","date":"2022-02-07","objectID":"/posts/devops/docker/:2:0","tags":["devops"],"title":"docker\u0026compose安装","uri":"/posts/devops/docker/"},{"categories":null,"content":"compose安装(x86) curl -L \"https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose # 加速版 curl -L \"https://hub.fastgit.xyz/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose ","date":"2022-02-07","objectID":"/posts/devops/docker/:3:0","tags":["devops"],"title":"docker\u0026compose安装","uri":"/posts/devops/docker/"},{"categories":null,"content":"compose arm 版本 wget https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-armv7 mv ./docker-compose-linux-armv7 /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose ","date":"2022-02-07","objectID":"/posts/devops/docker/:4:0","tags":["devops"],"title":"docker\u0026compose安装","uri":"/posts/devops/docker/"},{"categories":null,"content":"fly.io 类似于Okteto、Heroku和Railway的PaaS平台。 只能通过CLI登录，对小白可能有些不太友好。 官网：fly.io 免费额度：Fly App Pricing 免费额度有三个不间断运行的容器，以及160G的出站流量。(东亚30g，欧美100g，印度30g) ","date":"2022-02-07","objectID":"/posts/cloud/fly/:1:0","tags":["白嫖","cloud","PaaS"],"title":"Fly.io 免费PaaS平台，以及哪吒面板的部署","uri":"/posts/cloud/fly/"},{"categories":null,"content":"使用(以部署哪吒面板为例) 安装fly cli 把哪吒源码下下来，需要进行一些修改 修改cmd/dashboad/main.go ,在init函数下加上 //新建conf文件 file6, err := os.Create(\"data/config.yaml\") if err != nil { fmt.Println(err) } data := `debug: false httpport: 80 grpcport: 5555 oauth2: type: \"github\" #Oauth2 登录接入类型，gitee/github admin: \"{你的github用户名}\" #管理员列表，半角逗号隔开 clientid: \"\" # 在 https://github.com/settings/developers 创建，无需审核 Callback 填 http(s)://域名或IP/oauth2/callback clientsecret: \"\" site: brand: \"xxx\" cookiename: \"nezha-dashboard\" #浏览器 Cookie 字段名，可不改 theme: \"default\" ` file6.WriteString(data) file6.Close() 这样就相当于可以直接嵌入文件 为了使数据持久话，我们需要添加volume,fly提供3g免费空间，我们新建一个g就行，fly volumes create nz_data --region hkg --size 1 运行fly launch 生成fly.toml文件，修改成 # fly.toml file generated for nz on 2022-02-07T02:08:50+08:00 app = \"nz\" kill_signal = \"SIGINT\" kill_timeout = 5 processes = [] [env] [experimental] allowed_public_ports = [] auto_rollback = true [mounts] destination = \"/dashboard/data\" source = \"nz_data\" [[services]] http_checks = [] internal_port = 80 processes = [\"app\"] protocol = \"tcp\" script_checks = [] [services.concurrency] hard_limit = 25 soft_limit = 20 type = \"connections\" [[services.ports]] handlers = [\"http\"] port = 80 [[services.ports]] handlers = [\"tls\", \"http\"] port = 443 [[services.tcp_checks]] grace_period = \"1s\" interval = \"15s\" restart_limit = 0 timeout = \"2s\" [[services]] http_checks = [] internal_port = 5555 processes = [\"app\"] protocol = \"tcp\" script_checks = [] [services.concurrency] hard_limit = 25 soft_limit = 20 type = \"connections\" [[services.ports]] port = 5555 [[services.tcp_checks]] grace_period = \"1s\" interval = \"15s\" restart_limit = 0 timeout = \"2s\" 具体意思可以去fly文档看，文档还是非常详细的 运行fly deploy部署app，他会自动把你代码打包成docker镜像上传 大功告成，接下来你就可以去控制台看部署的结果了 演示站 ","date":"2022-02-07","objectID":"/posts/cloud/fly/:2:0","tags":["白嫖","cloud","PaaS"],"title":"Fly.io 免费PaaS平台，以及哪吒面板的部署","uri":"/posts/cloud/fly/"},{"categories":null,"content":"优点 不怕宕机 白嫖党狂喜 ","date":"2022-02-07","objectID":"/posts/cloud/fly/:2:1","tags":["白嫖","cloud","PaaS"],"title":"Fly.io 免费PaaS平台，以及哪吒面板的部署","uri":"/posts/cloud/fly/"},{"categories":null,"content":"缺点 很难更新 备份或者迁移很难 ","date":"2022-02-07","objectID":"/posts/cloud/fly/:2:2","tags":["白嫖","cloud","PaaS"],"title":"Fly.io 免费PaaS平台，以及哪吒面板的部署","uri":"/posts/cloud/fly/"},{"categories":null,"content":"后记 fly.io 也是我最近才刚刚发现的，不知道能不能长久，也不知道有没有大厂背书。所以稳定性还有待观察 注册fly是要用信用卡的，一般的卡都能过，会交易10美元，所以卡里面最好大于10美元，啥卡都行，没卡的去微信搞个易呗卡 虽说是部署在香港的，但是ipv4解析到的地方是英国，所以访问速度不是很快，ipv6解到的是新加坡 ","date":"2022-02-07","objectID":"/posts/cloud/fly/:3:0","tags":["白嫖","cloud","PaaS"],"title":"Fly.io 免费PaaS平台，以及哪吒面板的部署","uri":"/posts/cloud/fly/"},{"categories":null,"content":"参考文献 https://liusy.eu.org/tag/fly-io/ https://dnslin.com/index.php/archives/37.html https://blog.kermsite.com/p/flyio/ ","date":"2022-02-07","objectID":"/posts/cloud/fly/:4:0","tags":["白嫖","cloud","PaaS"],"title":"Fly.io 免费PaaS平台，以及哪吒面板的部署","uri":"/posts/cloud/fly/"},{"categories":null,"content":"安装 #deb curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.15.2-amd64.deb sudo dpkg -i filebeat-7.15.2-amd64.deb #rpm curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.15.2-x86_64.rpm sudo rpm -vi filebeat-7.15.2-x86_64.rpm ","date":"2021-10-21","objectID":"/posts/elastic/filebeat/:1:0","tags":["devops"],"title":"filebeat","uri":"/posts/elastic/filebeat/"},{"categories":null,"content":"设置 路径： /var/filebeat/filebeat.yml output.elasticsearch:hosts:[\"myEShost:9200\"]username:\"filebeat_internal\"password:\"YOUR_PASSWORD\"setup.kibana:host:\"mykibanahost:5601\"username:\"my_kibana_user\"password:\"{pwd}\"","date":"2021-10-21","objectID":"/posts/elastic/filebeat/:2:0","tags":["devops"],"title":"filebeat","uri":"/posts/elastic/filebeat/"},{"categories":null,"content":"模块配置 可用模块 filebeat modules list 开启模块 filebeat modules enable system nginx mysql 模块设置路径 ： /var/filebeat/modules.d/ ","date":"2021-10-21","objectID":"/posts/elastic/filebeat/:3:0","tags":["devops"],"title":"filebeat","uri":"/posts/elastic/filebeat/"},{"categories":null,"content":"启动 验证服务 filebeat setup -e 验证完可用后，后台启动 sudo service filebeat start ","date":"2021-10-21","objectID":"/posts/elastic/filebeat/:4:0","tags":["devops"],"title":"filebeat","uri":"/posts/elastic/filebeat/"},{"categories":null,"content":"GOVER=1.17.2 wget golang.google.cn/dl/go${GOVER}.linux-amd64.tar.gz tar -xzf go${GOVER}.linux-amd64.tar.gz mv ./go /usr/local/go echo \"export PATH=$PATH:/usr/local/go/bin\" \u003e\u003e /etc/profile source /etc/profile rm golang.google.cn/dl/go${GOVER}.linux-amd64.tar.gz go env -w GOPROXY=https://mirrors.cloud.tencent.com/go/ go env -w GOPROXY=http://mirrors.tencentyun.com/go/ export GOPROXY=http://mirrors.tencentyun.com/go/ ","date":"2021-10-21","objectID":"/posts/go/%E5%AE%89%E8%A3%85/:0:0","tags":["Go"],"title":"go安装","uri":"/posts/go/%E5%AE%89%E8%A3%85/"},{"categories":null,"content":"go提供了一个http包，可以通过这个包方便的进行http请求 import ( \"fmt\" \"io/ioutil\" \"net/http\" \"strings\" ) // http.Get func httpGet() { resp, err := http.Get(\"http://www.baidu.com\") if err != nil { fmt.Println(err) return } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) fmt.Println(string(body)) } func httpPost() { resp, err := http.Post(\"http://www.baidu.com\", \"application/x-www-form-urlencode\", strings.NewReader(\"name=abc\")) // Content-Type post请求必须设置 if err != nil { return } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) fmt.Println(string(body)) } client := \u0026http.Client{} req, err := http.NewRequest(\"POST\", \"http://121.36.71.167:7001/\", strings.NewReader(\"name=cjb\")) if err != nil { fmt.Println(err) } req.Header.Set(\"Content-Type\", \"application/json\") req.Header.Set(\"Cookie\", \"name=anny\") resp, err := client.Do(req) if err != nil { fmt.Println(err) } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) if err != nil { fmt.Println(err) } fmt.Println(string(body)) ","date":"2021-10-21","objectID":"/posts/go/%E8%AF%B7%E6%B1%82-http/:0:0","tags":["Go"],"title":"go请求http","uri":"/posts/go/%E8%AF%B7%E6%B1%82-http/"},{"categories":null,"content":"fetch()的功能与 XMLHttpRequest 基本相同，但有三个主要的差异。 （1）fetch()使用 Promise，不使用回调函数，因此大大简化了写法，写起来更简洁。 （2）fetch()采用模块化设计，API 分散在多个对象上（Response 对象、Request 对象、Headers 对象），更合理一些；相比之下，XMLHttpRequest 的 API 设计并不是很好，输入、输出、状态都在同一个接口管理，容易写出非常混乱的代码。 （3）fetch()通过数据流（Stream 对象）处理数据，可以分块读取，有利于提高网站性能表现，减少内存占用，对于请求大文件或者网速慢的场景相当有用。XMLHTTPRequest 对象不支持数据流，所有的数据必须放在缓存里，不支持分块读取，必须等待全部拿到后，再一次性吐出来。 在用法上，fetch()接受一个 URL 字符串作为参数，默认向该网址发出 GET 请求，返回一个 Promise 对象。它的基本用法如下。 fetch(url) .then(…) .catch(…) 下面是一个例子，从服务器获取 JSON 数据。 fetch(‘https://api.github.com/users/ruanyf') .then(response =\u003e response.json()) .then(json =\u003e console.log(json)) .catch(err =\u003e console.log(‘Request Failed’, err)); 上面示例中，fetch()接收到的response是一个 Stream 对象，response.json()是一个异步操作，取出所有内容，并将其转为 JSON 对象。 Promise 可以使用 await 语法改写，使得语义更清晰。 async function getJSON() { let url = ‘https://api.github.com/users/ruanyf'; try { let response = await fetch(url); return await response.json(); } catch (error) { console.log(‘Request Failed’, error); } } 上面示例中，await语句必须放在try…catch里面，这样才能捕捉异步操作中可能发生的错误。 后文都采用await的写法，不使用.then()的写法。 二、Response 对象：处理 HTTP 回应 2.1 Response 对象的同步属性 fetch()请求成功以后，得到的是一个 Response 对象。它对应服务器的 HTTP 回应。 const response = await fetch(url); 前面说过，Response 包含的数据通过 Stream 接口异步读取，但是它还包含一些同步属性，对应 HTTP 回应的标头信息（Headers），可以立即读取。 async function fetchText() { let response = await fetch('/readme.txt’); console.log(response.status); console.log(response.statusText); } 上面示例中，response.status和response.statusText就是 Response 的同步属性，可以立即读取。 标头信息属性有下面这些。 Response.ok Response.ok属性返回一个布尔值，表示请求是否成功，true对应 HTTP 请求的状态码 200 到 299，false对应其他的状态码。 Response.status Response.status属性返回一个数字，表示 HTTP 回应的状态码（例如200，表示成功请求）。 Response.statusText Response.statusText属性返回一个字符串，表示 HTTP 回应的状态信息（例如请求成功以后，服务器返回\"OK\"）。 Response.url Response.url属性返回请求的 URL。如果 URL 存在跳转，该属性返回的是最终 URL。 Response.type Response.type属性返回请求的类型。可能的值如下： basic：普通请求，即同源请求。cors：跨域请求。error：网络错误，主要用于 Service Worker。opaque：如果fetch()请求的type属性设为no-cors，就会返回这个值，详见请求部分。表示发出的是简单的跨域请求，类似表单的那种跨域请求。opaqueredirect：如果fetch()请求的redirect属性设为manual，就会返回这个值，详见请求部分。 Response.redirected Response.redirected属性返回一个布尔值，表示请求是否发生过跳转。 2.2 判断请求是否成功 fetch()发出请求以后，有一个很重要的注意点：只有网络错误，或者无法连接时，fetch()才会报错，其他情况都不会报错，而是认为请求成功。 这就是说，即使服务器返回的状态码是 4xx 或 5xx，fetch()也不会报错（即 Promise 不会变为 rejected状态）。 只有通过Response.status属性，得到 HTTP 回应的真实状态码，才能判断请求是否成功。请看下面的例子。 async function fetchText() { let response = await fetch('/readme.txt’); if (response.status \u003e= 200 \u0026\u0026 response.status \u003c 300) { return await response.text(); } else { throw new Error(response.statusText); } } 上面示例中，response.status属性只有等于 2xx （200~299），才能认定请求成功。这里不用考虑网址跳转（状态码为 3xx），因为fetch()会将跳转的状态码自动转为 200。 另一种方法是判断response.ok是否为true。 if (response.ok) { // 请求成功 } else { // 请求失败 } 2.3 Response.headers 属性 Response 对象还有一个Response.headers属性，指向一个 Headers 对象，对应 HTTP 回应的所有标头。 Headers 对象可以使用for…of循环进行遍历。 const response = await fetch(url); for (let [key, value] of response.headers) { console.log(${key} : ${value}); } // 或者 for (let [key, value] of response.headers.entries()) { console.log(${key} : ${value}); } Headers 对象提供了以下方法，用来操作标头。 Headers.get()：根据指定的键名，返回键值。Headers.has()： 返回一个布尔值，表示是否包含某个标头。Headers.set()：将指定的键名设置为新的键值，如果该键名不存在则会添加。Headers.append()：添加标头。Headers.delete()：删除标头。Headers.keys()：返回一个遍历器，可以依次遍历所有键名。Headers.values()：返回一个遍历器，可以依次遍历所有键值。Headers.entries()：返回一个遍历器，可以依次遍历所有键值对（[key, value]）。Headers.forEach()：依次遍历标头，每个标头都会执行一次参数函数。 上面的有些方法可以修改标头，那是因为继承自 Headers 接口。对于 HTTP 回应来说，修改标头意义不大，况且很多标头是只读的，浏览器不允许修改。 这些方法中，最常用的是response.headers.get()，用于读取某个标头的值。 let response = await fetch(url); response.headers.get(‘Content-Type’) // application/json; charset=utf-8 Headers.keys()和Headers.values()方法用来分别遍历标头的键名和键值。 // 键名 for(let key of myHeaders.keys()) { console.log(key); } // 键值 for(let value of myHeaders.values()) { console.log(value); } Headers.forEach()方法也可以遍历所有的键值和键名。 let response = await fetch(url); response.headers.forEach( (value, key) =\u003e console.log(key, ‘:’, value) ); 2.4 读取内容的方法 Response对象根据服务器返回的不同类型的数据，提供了不同的读取方法。 response.text()：得到文本字符串。response.json()：得到 JSON 对象。","date":"2021-10-21","objectID":"/posts/fetch/:0:0","tags":["前端"],"title":"webApi fetch使用","uri":"/posts/fetch/"},{"categories":null,"content":"基本原理和配置 wireguard会新建一张虚拟网卡，所有的流量都经过这个网卡，所以你要设定的主要有3块东西 服务器公网地址 v6 || v4 服务端网段 \u0026\u0026 ip 客户端网段 \u0026\u0026 ip ","date":"2021-10-21","objectID":"/posts/wireguard/:0:1","tags":null,"title":"wireguard安装","uri":"/posts/wireguard/"},{"categories":null,"content":"安装脚本 curl -O https://raw.githubusercontent.com/angristan/wireguard-install/master/wireguard-install.sh chmod +x wireguard-install.sh ./wireguard-install.sh # 国内版 curl -O https://raw.fastgit.org/angristan/wireguard-install/master/wireguard-install.sh chmod +x wireguard-install.sh ./wireguard-install.sh ","date":"2021-10-21","objectID":"/posts/wireguard/:0:2","tags":null,"title":"wireguard安装","uri":"/posts/wireguard/"},{"categories":null,"content":"一、gitmodules是什么 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。 ","date":"2021-09-21","objectID":"/posts/gitmodules%E8%AF%A6%E8%A7%A3git%E5%AD%90%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE/:1:0","tags":["git","code"],"title":"gitmodules详解（Git子模块配置）","uri":"/posts/gitmodules%E8%AF%A6%E8%A7%A3git%E5%AD%90%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE/"},{"categories":null,"content":"如何使用 $ git submodule add https://github.com/XXX .gitmodules文件 [submodule \"themes/ananke\"]\rpath = themes/ananke\rurl = https://github.com/theNewDynamic/gohugo-theme-ananke.git\r[submodule \"themes/even\"]\rpath = themes/even\rurl = https://github.com/olOwOlo/hugo-theme-even.git\r","date":"2021-09-21","objectID":"/posts/gitmodules%E8%AF%A6%E8%A7%A3git%E5%AD%90%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE/:2:0","tags":["git","code"],"title":"gitmodules详解（Git子模块配置）","uri":"/posts/gitmodules%E8%AF%A6%E8%A7%A3git%E5%AD%90%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE/"},{"categories":["life"],"content":"1.安装浏览器 点击下载 下载完成后安装 ","date":"2021-09-21","objectID":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E6%89%8B%E6%9C%BA%E7%89%88/:1:0","tags":["学习通"],"title":"学习通脚本安装（手机版）","uri":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E6%89%8B%E6%9C%BA%E7%89%88/"},{"categories":["life"],"content":"2.安装油猴 打开浏览器，跟图走 ","date":"2021-09-21","objectID":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E6%89%8B%E6%9C%BA%E7%89%88/:2:0","tags":["学习通"],"title":"学习通脚本安装（手机版）","uri":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E6%89%8B%E6%9C%BA%E7%89%88/"},{"categories":["life"],"content":"3.安装脚本 在此浏览器内打开 http://script.2333.pub 点击安装脚本 ","date":"2021-09-21","objectID":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E6%89%8B%E6%9C%BA%E7%89%88/:3:0","tags":["学习通"],"title":"学习通脚本安装（手机版）","uri":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E6%89%8B%E6%9C%BA%E7%89%88/"},{"categories":["life"],"content":"4.检查安装 打开 http://chaoxing.com 登录 打开一个课程，如果出现查题面板即安装成功 ","date":"2021-09-21","objectID":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E6%89%8B%E6%9C%BA%E7%89%88/:4:0","tags":["学习通"],"title":"学习通脚本安装（手机版）","uri":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E6%89%8B%E6%9C%BA%E7%89%88/"},{"categories":["life"],"content":"一、浏览器选择 推荐使用edge，如果是chrome要科网 ","date":"2021-09-21","objectID":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E7%94%B5%E8%84%91%E7%89%88/:1:0","tags":["学习通"],"title":"学习通脚本安装（电脑版）","uri":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E7%94%B5%E8%84%91%E7%89%88/"},{"categories":["life"],"content":"二、安装油猴 打开 https://microsoftedge.microsoft.com/addons/detail/iikmkjmpaadaobahmlepeloendndfphd?hl=zh-CN（edge） https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=zh-CN (chrome) 点击安装拓展 ","date":"2021-09-21","objectID":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E7%94%B5%E8%84%91%E7%89%88/:2:0","tags":["学习通"],"title":"学习通脚本安装（电脑版）","uri":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E7%94%B5%E8%84%91%E7%89%88/"},{"categories":["life"],"content":"三、安装脚本 打开 http://ti.fakev.cn/script 点击安装脚本 ","date":"2021-09-21","objectID":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E7%94%B5%E8%84%91%E7%89%88/:3:0","tags":["学习通"],"title":"学习通脚本安装（电脑版）","uri":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E7%94%B5%E8%84%91%E7%89%88/"},{"categories":["life"],"content":"四、检查安装 打开油猴管理面板，确保当前只有一个网课脚本打开 随便打开一个课程，记得要打开《学生学习页面》像https://mooc1-1.chaoxing.com/mycourse/studentstudy这样，脚本会自动启动，遇到题目会自动答题，遇到视频会自动播放 视频可以开倍速拉进度条，不过不建议， ","date":"2021-09-21","objectID":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E7%94%B5%E8%84%91%E7%89%88/:4:0","tags":["学习通"],"title":"学习通脚本安装（电脑版）","uri":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E7%94%B5%E8%84%91%E7%89%88/"}]