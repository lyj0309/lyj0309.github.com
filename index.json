[{"categories":null,"content":"前言 railway是一个免费的PaaS平台https://railway.app,每月有5美元免费额度，如果添加支付方式则有5美元免费额度 ","date":"2022-02-12","objectID":"/posts/cloud/%E9%83%A8%E7%BD%B2cloudreve%E8%87%B3railway.app/:1:0","tags":null,"title":"部署cloudreve至railway.app","uri":"/posts/cloud/%E9%83%A8%E7%BD%B2cloudreve%E8%87%B3railway.app/"},{"categories":null,"content":"生成自己的github仓库 演示仓库 https://github.com/lyj0309/pan ","date":"2022-02-12","objectID":"/posts/cloud/%E9%83%A8%E7%BD%B2cloudreve%E8%87%B3railway.app/:2:0","tags":null,"title":"部署cloudreve至railway.app","uri":"/posts/cloud/%E9%83%A8%E7%BD%B2cloudreve%E8%87%B3railway.app/"},{"categories":null,"content":"目录说明 cr 这个文件是cloudreve的linux可执行文件,我用的3.4版本 Dockerfile，railway会通过这个自动构建镜像 FROMalpineENV PUID=1000 ENV PGID=1000 ENV TZ=\"Asia/Shanghai\"LABEL MAINTAINER=\"lyj0309\"WORKDIR/app# ADD config.ini .ADD cr .RUN echo \"\u003e\u003e\u003e\u003e\u003e\u003e update dependencies\" \\ \u0026\u0026 apk update \\ \u0026\u0026 apk add tzdata gcompat\\ \u0026\u0026 echo \"\u003e\u003e\u003e\u003e\u003e\u003e set up timezone\" \\ \u0026\u0026 cp /usr/share/zoneinfo/${TZ} /etc/localtime \\ \u0026\u0026 echo ${TZ} \u003e /etc/timezone \\ \u0026\u0026 echo \"\u003e\u003e\u003e\u003e\u003e\u003e fix premission\" \\ \u0026\u0026 chmod +x /app/crEXPOSE5212# ENTRYPOINT [\"/app/cr\",\"-c\",\"/app/config.ini\"] ENTRYPOINT [\"/app/cr\"] 神奇的是，似乎由于滥用，railway已经屏蔽了一切有关cloudreve的东西 注意： 仓库名字不要包含cloudreve 仓库文件名不要包含cloudreve 仓库文件内容不要包含cloudreve ","date":"2022-02-12","objectID":"/posts/cloud/%E9%83%A8%E7%BD%B2cloudreve%E8%87%B3railway.app/:2:1","tags":null,"title":"部署cloudreve至railway.app","uri":"/posts/cloud/%E9%83%A8%E7%BD%B2cloudreve%E8%87%B3railway.app/"},{"categories":null,"content":"安装 在railway中导入仓库 接着会自动构建app，构建成功后，在运行日志里面查看初始密码 系统应该会提示修改端口，如果没有则自己修改 端口为5212 ","date":"2022-02-12","objectID":"/posts/cloud/%E9%83%A8%E7%BD%B2cloudreve%E8%87%B3railway.app/:3:0","tags":null,"title":"部署cloudreve至railway.app","uri":"/posts/cloud/%E9%83%A8%E7%BD%B2cloudreve%E8%87%B3railway.app/"},{"categories":null,"content":"检验 railway会自动送你个域名访问 想添加自定义域名也是可以的 ","date":"2022-02-12","objectID":"/posts/cloud/%E9%83%A8%E7%BD%B2cloudreve%E8%87%B3railway.app/:4:0","tags":null,"title":"部署cloudreve至railway.app","uri":"/posts/cloud/%E9%83%A8%E7%BD%B2cloudreve%E8%87%B3railway.app/"},{"categories":null,"content":"市面上有很多博客的生成框架，hugo, wordpress, hexo 我选择hugo有以下几点 我是gopher hugo生成网站快 配置简单 官方网站https://gohugo.io/ ","date":"2022-02-11","objectID":"/posts/hugo%E5%AE%89%E8%A3%85/:0:0","tags":["other"],"title":"Hugo安装与使用","uri":"/posts/hugo%E5%AE%89%E8%A3%85/"},{"categories":null,"content":"安装 ","date":"2022-02-11","objectID":"/posts/hugo%E5%AE%89%E8%A3%85/:1:0","tags":["other"],"title":"Hugo安装与使用","uri":"/posts/hugo%E5%AE%89%E8%A3%85/"},{"categories":null,"content":"win 这里推荐使用choco安装, 直接 choco install hugo即可 ps: 最好把代理打开，choco会自动走代理 ","date":"2022-02-11","objectID":"/posts/hugo%E5%AE%89%E8%A3%85/:1:1","tags":["other"],"title":"Hugo安装与使用","uri":"/posts/hugo%E5%AE%89%E8%A3%85/"},{"categories":null,"content":"生成站点 hugo new site quickstart 这时候就会生成一个名叫quickstart的文件夹，里面包含了hugo站点的一些东西 ","date":"2022-02-11","objectID":"/posts/hugo%E5%AE%89%E8%A3%85/:1:2","tags":["other"],"title":"Hugo安装与使用","uri":"/posts/hugo%E5%AE%89%E8%A3%85/"},{"categories":null,"content":"添加主题 github上面有许许多多的主题，直接去上面搜索即可 https://github.com/search?q=hugo+theme 找到心仪的主题，下载或clone到theme文件夹 ","date":"2022-02-11","objectID":"/posts/hugo%E5%AE%89%E8%A3%85/:1:3","tags":["other"],"title":"Hugo安装与使用","uri":"/posts/hugo%E5%AE%89%E8%A3%85/"},{"categories":null,"content":"添加页面 hugo new /posts/{name}.md name是你文章的名字，支持中文，运行后会在文件夹下面生成md文件，直接编写即可 ps:现在生成的页面是草稿页面，当你写完后去掉draft: true这一行即可变成正式页面 ","date":"2022-02-11","objectID":"/posts/hugo%E5%AE%89%E8%A3%85/:1:4","tags":["other"],"title":"Hugo安装与使用","uri":"/posts/hugo%E5%AE%89%E8%A3%85/"},{"categories":null,"content":"配置主题 在hugo站点的跟文件夹下面有一个config.toml的配置文件，把里面的theme改成你下载的主题 每个主题的配置文件都不一样，你需要仔细浏览主题的教程 ","date":"2022-02-11","objectID":"/posts/hugo%E5%AE%89%E8%A3%85/:1:5","tags":["other"],"title":"Hugo安装与使用","uri":"/posts/hugo%E5%AE%89%E8%A3%85/"},{"categories":null,"content":"生成预览 hugo server -D即可生成预览，包含草稿 hugo server不包含草稿 运行后会生成一个地址，访问即可预览 ","date":"2022-02-11","objectID":"/posts/hugo%E5%AE%89%E8%A3%85/:1:6","tags":["other"],"title":"Hugo安装与使用","uri":"/posts/hugo%E5%AE%89%E8%A3%85/"},{"categories":null,"content":"生成静态文件 hugo -D包含草稿 hugo 不包含草稿 运行后，在目录下面会生吃一个public的文件夹，里面即使成品 ","date":"2022-02-11","objectID":"/posts/hugo%E5%AE%89%E8%A3%85/:1:7","tags":["other"],"title":"Hugo安装与使用","uri":"/posts/hugo%E5%AE%89%E8%A3%85/"},{"categories":null,"content":"前言 市面上有许许多多的静态网站部署，vercel,netify,aws,azure,github pages··· 我经过多方考虑，最终选择了azure的静态网站部署。下面是一张对照表 ps: 都有免费额度,azure我用的是外币卡注册的，应该学生账号也可以 azure vercel github pages 地区\u0026速度 可选香港，速度起飞 美国aws，速度一般般 速度不慢，但github.io经常阻断 免费流量 100G 100G 自定义域名 2个 无限制 无限制 自动ssl 有 有 有 serverless Azure Functions 有 无 最大应用大小 250mb 15,000个文件 无 综上，除了地区和速度之外，其他的也差不多，而且，香港的一般也不会阻断，所以我选择azure ","date":"2022-02-11","objectID":"/posts/hugo%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2azure/:1:0","tags":["other","白嫖"],"title":"Hugo免费部署azure","uri":"/posts/hugo%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2azure/"},{"categories":null,"content":"安装hugo和生成与写博客 点这里 ","date":"2022-02-11","objectID":"/posts/hugo%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2azure/:2:0","tags":["other","白嫖"],"title":"Hugo免费部署azure","uri":"/posts/hugo%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2azure/"},{"categories":null,"content":"部署至azure 官方文档 我采用的是github储存 ","date":"2022-02-11","objectID":"/posts/hugo%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2azure/:3:0","tags":["other","白嫖"],"title":"Hugo免费部署azure","uri":"/posts/hugo%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2azure/"},{"categories":null,"content":"将站点推送至github 创建github储存库 git remote add origin https://github.com/\u003cYOUR_USER_NAME\u003e/hugo-static-app git push --set-upstream origin main ","date":"2022-02-11","objectID":"/posts/hugo%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2azure/:3:1","tags":["other","白嫖"],"title":"Hugo免费部署azure","uri":"/posts/hugo%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2azure/"},{"categories":null,"content":"部署 打开Azure控制台 https://portal.azure.com/#create/Microsoft.StaticApp 新建web应用 主要注意两点 地区选择east aisa(香港) 使用github登录，然后选择你的库 点击创建 这时候azure就会自动生成一个github action，在.github\\workflows\\xxx.yml,然后会自动运行，就部署上去了 ","date":"2022-02-11","objectID":"/posts/hugo%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2azure/:3:2","tags":["other","白嫖"],"title":"Hugo免费部署azure","uri":"/posts/hugo%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2azure/"},{"categories":null,"content":"自定义域名 在你的控制台下面有个自定义域的按钮，点击，在点击添加即可 ","date":"2022-02-11","objectID":"/posts/hugo%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2azure/:4:0","tags":["other","白嫖"],"title":"Hugo免费部署azure","uri":"/posts/hugo%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2azure/"},{"categories":null,"content":"注意事项 在我的网站实际部署中，因为采用了atomic-algolia这个插件，所以在根目录下有package.json文件，而azure添加的那个github action文件azure-static-web-appsxxx.yml实际上并没有指定编译环境，完全是由oryx这个编译器猜的，所以这玩意猜我是npm项目，而我是hugo,导致了error 解决办法就是在github action文件加一句，rm package.json ","date":"2022-02-11","objectID":"/posts/hugo%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2azure/:5:0","tags":["other","白嫖"],"title":"Hugo免费部署azure","uri":"/posts/hugo%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2azure/"},{"categories":null,"content":"//459. 重复的子字符串 func repeatedSubstringPattern(s string) bool { l := len(s) for i := 1; i \u003c= l/2; i++ { if l%i == 0 { subs := s[:i] t := true for k := 0; k \u003c l/i; k++ { if s[k*i:k*i+i] != subs { t = false break } } if t { return true } } } return false } //1447. 最简分数 func simplifiedFractions(n int) (res []string) { for i := 1; i \u003c n; i++ { for k := n; k \u003e 1; k-- { if i \u003e= k { break } //判断化简 for f := 2; f \u003c= i; f++ { if i%f == 0 \u0026\u0026 k%f == 0 { goto this } } res = append(res, strconv.Itoa(i)+\"/\"+strconv.Itoa(k)) this: } } return } //268. 丢失的数字 func missingNumber(nums []int) int { arr := make([]bool, len(nums)) for _, num := range nums { arr[num] = true } for i, b := range arr { if b == false { return i } } return 0 } //258. 各位相加 func addDigits(num int) int { for { arr := getBit(num) num = 0 for _, i := range arr { num += i } if num \u003c 10 { return num } } } //242. 有效的字母异位词 func isAnagram(s string, t string) bool { m := map[int32]int{} for _, i := range s { m[i]++ } for _, i := range t { m[i]-- } for _, i := range m { if i != 0 { return false } } return true } //228. 汇总区间 func summaryRanges(nums []int) (res []string) { if len(nums) == 0 { return } k := 0 for i := 0; i \u003c len(nums)-1; i++ { if nums[i+1]-nums[i] != 1 { //生成单个 r := strconv.Itoa(nums[i]) if k != i { r = strconv.Itoa(nums[k]) + \"-\u003e\" + r } res = append(res, r) k = i + 1 } } if k == len(nums)-1 { res = append(res, strconv.Itoa(nums[len(nums)-1])) } else { res = append(res, strconv.Itoa(nums[k])+\"-\u003e\"+strconv.Itoa(nums[len(nums)-1])) } return } type MyStack struct { arr []int } //225. 用队列实现栈 func Constructor() MyStack { return MyStack{} } func (s *MyStack) Push(x int) { s.arr = append(s.arr, x) } func (s *MyStack) Pop() int { a := s.arr[len(s.arr)] s.arr = s.arr[:len(s.arr)-1] return a } func (s *MyStack) Top() int { return s.arr[len(s.arr)] } func (s *MyStack) Empty() bool { return len(s.arr) == 0 } //219. 存在重复元素 II func containsNearbyDuplicate(nums []int, k int) bool { m := make(map[int]int) for i, num := range nums { if i-m[num] \u003c= k \u0026\u0026 m[num] != 0 { return true } m[num] = i } return false } func myPow(x float64, n int) float64 { return math.Pow(x, float64(n)) } func majorityElement(nums []int) int { m := make(map[int]int) for _, num := range nums { m[num]++ if m[num] \u003e (len(nums) / 2) { return num } } return 0 } //168. Excel表列名称 func convertToTitle(columnNumber int) string { ans := []byte{} for columnNumber \u003e 0 { a0 := (columnNumber-1)%26 + 1 ans = append(ans, 'A'+byte(a0-1)) columnNumber = (columnNumber - a0) / 26 } for i, n := 0, len(ans); i \u003c n/2; i++ { ans[i], ans[n-1-i] = ans[n-1-i], ans[i] } return string(ans) } //1996. 游戏中弱角色的数量 func numberOfWeakCharacters(properties [][]int) (ans int) { sort.Slice(properties, func(i, j int) bool { p, q := properties[i], properties[j] return p[0] \u003c q[0] || p[0] == q[0] \u0026\u0026 p[1] \u003e q[1] }) var st []int for _, p := range properties { for len(st) \u003e 0 \u0026\u0026 st[len(st)-1] \u003c p[1] { st = st[:len(st)-1] ans++ } st = append(st, p[1]) } return } //171. Excel 表列序号 func titleToNumber(columnTitle string) (res int) { l := len(columnTitle) k := 1 for i := l; i \u003e 0; i-- { res += int(columnTitle[i-1]-64) * k k *= 26 } return } //202. 快乐数 func isHappy(n int) bool { m := make(map[int]bool) for { arr := getBit(n) n = 0 for _, i := range arr { n += i * i } if m[n] == true { return false } m[n] = true if n \u003c= 3 { if n == 1 { return true } else { return false } } } } //217. 存在重复元素 func containsDuplicate(nums []int) bool { if len(nums) \u003e 0 { for k, v := range nums { for _, vv := range nums[k+1:] { if v == vv { return true } } } } return false } ","date":"2022-02-10","objectID":"/posts/go/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98/:0:0","tags":null,"title":"力扣刷题","uri":"/posts/go/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98/"},{"categories":null,"content":"前言 想把博客作为自己的笔记，用过有道云笔记和onenote，hugo美中不足的地方就是搜索不了笔记，直到后面我发现其实是可以搜索的，搜索方式也是多种多样，主要有3种 elastic lunr algolia 易搭建性 难 简单 中等 收费 自建服务器或者一些提供商（有免费额度） 免费 收费（有免费额度） 搜索速度 快 中等（基于浏览器，每次需要下载所有索引） 快 ","date":"2022-02-09","objectID":"/hugo%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/:1:0","tags":null,"title":"Hugo使用添加algolia搜索","uri":"/hugo%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/"},{"categories":null,"content":"配置algolia账号 ","date":"2022-02-09","objectID":"/hugo%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/:2:0","tags":null,"title":"Hugo使用添加algolia搜索","uri":"/hugo%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/"},{"categories":null,"content":"注册账号 官网https://www.algolia.com/ ","date":"2022-02-09","objectID":"/hugo%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/:2:1","tags":null,"title":"Hugo使用添加algolia搜索","uri":"/hugo%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/"},{"categories":null,"content":"创建应用 记住计划选择free,1w的请求和1w的记录应该是够的 ","date":"2022-02-09","objectID":"/hugo%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/:2:2","tags":null,"title":"Hugo使用添加algolia搜索","uri":"/hugo%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/"},{"categories":null,"content":"创建索引 ","date":"2022-02-09","objectID":"/hugo%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/:2:3","tags":null,"title":"Hugo使用添加algolia搜索","uri":"/hugo%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/"},{"categories":null,"content":"获取api key 右上角的用户-\u003esetting api key 其中，Application ID 和 Search-Only API Key 是hugo所需要的 ","date":"2022-02-09","objectID":"/hugo%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/:2:4","tags":null,"title":"Hugo使用添加algolia搜索","uri":"/hugo%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/"},{"categories":null,"content":"配置hugo 我是用的是loveIt主题，在这个主题的配置文件中有配置搜索这个选项 # 搜索配置 [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"algolia\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"blog\" appID = \"xxx\" searchKey = \"xxx\" 其中appID和searchKey是上一步提到的 ","date":"2022-02-09","objectID":"/hugo%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/:3:0","tags":null,"title":"Hugo使用添加algolia搜索","uri":"/hugo%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/"},{"categories":null,"content":"索引的上传 至此，你的hugo已经可以使用algolia搜索了，但是还有一个问题，就是algolia并没有数据，即索引，我们需要生成索引，并上传给algolia，告诉他我们有哪些文章内容。 ","date":"2022-02-09","objectID":"/hugo%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/:4:0","tags":null,"title":"Hugo使用添加algolia搜索","uri":"/hugo%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/"},{"categories":null,"content":"非自动方式（不推荐） 运行hugo后，在public文件夹下面会生成一个index.json文件，这个即是索引文件，打开algolia网站，上传即可 ","date":"2022-02-09","objectID":"/hugo%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/:4:1","tags":null,"title":"Hugo使用添加algolia搜索","uri":"/hugo%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/"},{"categories":null,"content":"自动方式（推荐） github上面有个npm包，用来自动上传索引https://github.com/chrisdmacrae/atomic-algolia使用这个包即可 在你的根目录下新建package.json文件写入如下 { \"scripts\": { \"algolia\": \"atomic-algolia\" } } 添加github action文件到.github\\workclows name:GitHub Pageson:push:branches:- main # Set a branch name to trigger deploymentpull_request:jobs:deploy:runs-on:ubuntu-20.04concurrency:group:${{ github.workflow }}-${{ github.ref }}steps:- uses:actions/checkout@v2with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:'0.85.0'- name:Buildrun:hugo --minify- name:Use Node.jsuses:actions/setup-node@v1with:node-version:'12.x'- name:Install automic-algoliarun:| npm install atomic-algolianpm run algoliaenv:ALGOLIA_APP_ID:${{ secrets.ALGOLIA_APP_ID }}ALGOLIA_ADMIN_KEY:${{ secrets.ALGOLIA_ADMIN_KEY }}ALGOLIA_INDEX_NAME:${{ secrets.ALGOLIA_INDEX_NAME }}ALGOLIA_INDEX_FILE:\"./public/index.json\"添加action的secrcts git push即可 ","date":"2022-02-09","objectID":"/hugo%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/:4:2","tags":null,"title":"Hugo使用添加algolia搜索","uri":"/hugo%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/"},{"categories":null,"content":"检验 所有配置好后，在站点右上有个搜索图标，点击搜索查看结果 响应速度还是非常快的 ","date":"2022-02-09","objectID":"/hugo%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/:5:0","tags":null,"title":"Hugo使用添加algolia搜索","uri":"/hugo%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2/"},{"categories":null,"content":"实际上，刷机子的原理无非过一会儿发一个包看看能开通不，为了便携且贯彻落实白嫖精神，我使用的是railway部署的，一个免费的PaaS平台https://railway.app,每月有5美元免费额度 ","date":"2022-02-07","objectID":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/:0:0","tags":["白嫖","cloud"],"title":"甲骨文云自动刷arm(使用railway.app)","uri":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/"},{"categories":null,"content":"Github地址 https://github.com/lemoex/oci-help ","date":"2022-02-07","objectID":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/:1:0","tags":["白嫖","cloud"],"title":"甲骨文云自动刷arm(使用railway.app)","uri":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/"},{"categories":null,"content":"部署至railway ","date":"2022-02-07","objectID":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/:2:0","tags":["白嫖","cloud"],"title":"甲骨文云自动刷arm(使用railway.app)","uri":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/"},{"categories":null,"content":"建立自己的git仓库 按照网址上的教程配置好oci-help.ini和pem密钥 然后把源码clone下来，把.ini和pem都考进去 再添加个文件，Dockerfile FROMgolang:1.17.6 as builderENV GO111MODULE=on # CGO_ENABLED alpine禁用cgoWORKDIR/appADD go.mod .ADD go.sum .RUN go mod downloadCOPY . .RUN go build -o app ./RUN mkdir publish \u0026\u0026 cp app publishFROMalpineRUN apk add gcompatWORKDIR/app#复制成品到导出镜像COPY --from=builder /app/publish .#COPY --from=builder /app/*.ini ./COPY --from=builder /app/*.pem ./COPY --from=builder /app/1.sh ./ENTRYPOINT [\"sh\", 'echo -e \"2\\n1\\n\" | ./app']","date":"2022-02-07","objectID":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/:2:1","tags":["白嫖","cloud"],"title":"甲骨文云自动刷arm(使用railway.app)","uri":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/"},{"categories":null,"content":"部署至railway.app 注册好railway账号后，选择你的库，部署即可 预计每个月0.18$,四舍五入不要钱 ","date":"2022-02-07","objectID":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/:2:2","tags":["白嫖","cloud"],"title":"甲骨文云自动刷arm(使用railway.app)","uri":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/"},{"categories":null,"content":"效果 ","date":"2022-02-07","objectID":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/:3:0","tags":["白嫖","cloud"],"title":"甲骨文云自动刷arm(使用railway.app)","uri":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/"},{"categories":null,"content":"结论 实际上，用自己的虚拟机部署方便的多= =，用这个平台主要是不怕机子boom，没办法，就是爱折腾 ","date":"2022-02-07","objectID":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/:4:0","tags":["白嫖","cloud"],"title":"甲骨文云自动刷arm(使用railway.app)","uri":"/posts/cloud/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E8%87%AA%E5%8A%A8%E5%88%B7arm/"},{"categories":null,"content":"有时候，ddos或者各种攻击会导致服务瘫痪，或者当前服务器进入流量黑洞，无法访问，或者管理员手欠不小心删了一些数据，这时候，数据库的备份就显得尤为重要了。 本案例使用的是腾讯云的cos云存储来备份数据库，数据库在docker中的mysql中，每天备份一次，所以数据不是实时的，可以作为兜底使用 ","date":"2022-02-07","objectID":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/:0:0","tags":["devops"],"title":"Mysql自动备份","uri":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"},{"categories":null,"content":"从docker中导出数据库 docker exec mysql bash -c \"mysqldump -uroot -p123456 数据库名\u003e /xxx.sql\" ","date":"2022-02-07","objectID":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/:1:0","tags":["devops"],"title":"Mysql自动备份","uri":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"},{"categories":null,"content":"配置腾讯云cos 网址 https://cloud.tencent.com/document/product/436/63143 ","date":"2022-02-07","objectID":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/:2:0","tags":["devops"],"title":"Mysql自动备份","uri":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"},{"categories":null,"content":"下载 Linux 版本 COSCLI wget https://github.com/tencentyun/coscli/releases/download/v0.10.2-beta/coscli-linux #运行以下命令重命名文件： mv coscli-linux coscli \u0026\u0026 chmod 755 coscli #命令在其他位置为 COSCLI 交互式地生成配置文件 ./coscli config init ~/.cos.yaml cos配置文件 ","date":"2022-02-07","objectID":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/:2:1","tags":["devops"],"title":"Mysql自动备份","uri":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"},{"categories":null,"content":"数据库备份脚本 #/bin/bash cd /root/backup #导出数据库 docker exec mysql bash -c \"mysqldump -uroot -p123456 dbname\u003e /dbname.sql\" #cpoy到本机 docker cp mysql:/dbname.sql ./ #删除docker中的文件 docker exec mysql rm /dbname.sql #提交到腾讯云cos fname=$(date \"+%Y-%m-%d-%H-%M-%S\").sql echo \"开始上传数据库$fname\" ./coscli cp ./dbname.sql cos://dbname-backup/$fname rm ./dbname.sql #提醒 #可以使用各种方式提醒，server酱，短信啥的，我用的是自建server酱，wecomchan，详情bing #删除7天前的备份文件 ./coscli rm cos://bucket1/example/ -r --include \"\" 把这个脚本添加到crontab中，每天执行一次,我用的是宝塔的计划任务 ","date":"2022-02-07","objectID":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/:3:0","tags":["devops"],"title":"Mysql自动备份","uri":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"},{"categories":null,"content":"运行结果 ","date":"2022-02-07","objectID":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/:4:0","tags":["devops"],"title":"Mysql自动备份","uri":"/posts/devops/mysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"},{"categories":null,"content":"docker-compose我认为是单机管理容器的最佳方案，如果要多机 ","date":"2022-02-07","objectID":"/posts/devops/docker/:0:0","tags":["devops"],"title":"docker\u0026compose安装","uri":"/posts/devops/docker/"},{"categories":null,"content":"docker安装 curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun ","date":"2022-02-07","objectID":"/posts/devops/docker/:1:0","tags":["devops"],"title":"docker\u0026compose安装","uri":"/posts/devops/docker/"},{"categories":null,"content":"换源 cat \u003e /etc/docker/daemon.json \u003c\u003ceof { \"registry-mirrors\": [\"https://jrromknz.mirror.aliyuncs.com\"], \"exec-opts\":[\"native.cgroupdriver=systemd\"] } eof systemctl enable docker.service systemctl daemon-reload systemctl restart docker.service ","date":"2022-02-07","objectID":"/posts/devops/docker/:2:0","tags":["devops"],"title":"docker\u0026compose安装","uri":"/posts/devops/docker/"},{"categories":null,"content":"compose安装(x86) curl -L \"https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose # 加速版 curl -L \"https://hub.fastgit.xyz/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose ","date":"2022-02-07","objectID":"/posts/devops/docker/:3:0","tags":["devops"],"title":"docker\u0026compose安装","uri":"/posts/devops/docker/"},{"categories":null,"content":"compose arm 版本 wget https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-armv7 mv ./docker-compose-linux-armv7 /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose ","date":"2022-02-07","objectID":"/posts/devops/docker/:4:0","tags":["devops"],"title":"docker\u0026compose安装","uri":"/posts/devops/docker/"},{"categories":null,"content":"简介 男，01年双鱼座，对golang，devops感兴趣 擅长语言：Golang、Python、Javascript 描述：mjj，懒鬼 常用昵称：lyj0309 Github：https://github.com/lyj0309 ","date":"2022-02-07","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"fly.io 类似于Okteto、Heroku和Railway的PaaS平台。 只能通过CLI登录，对小白可能有些不太友好。 官网：fly.io 免费额度：Fly App Pricing 免费额度有三个不间断运行的容器，以及160G的出站流量。(东亚30g，欧美100g，印度30g) ","date":"2022-02-07","objectID":"/posts/cloud/fly/:1:0","tags":["白嫖","cloud","PaaS"],"title":"Fly.io 免费PaaS平台，以及哪吒面板的部署","uri":"/posts/cloud/fly/"},{"categories":null,"content":"使用(以部署哪吒面板为例) 安装fly cli 把哪吒源码下下来，需要进行一些修改 修改cmd/dashboad/main.go ,在init函数下加上 //新建conf文件 file6, err := os.Create(\"data/config.yaml\") if err != nil { fmt.Println(err) } data := `debug: false httpport: 80 grpcport: 5555 oauth2: type: \"github\" #Oauth2 登录接入类型，gitee/github admin: \"{你的github用户名}\" #管理员列表，半角逗号隔开 clientid: \"\" # 在 https://github.com/settings/developers 创建，无需审核 Callback 填 http(s)://域名或IP/oauth2/callback clientsecret: \"\" site: brand: \"xxx\" cookiename: \"nezha-dashboard\" #浏览器 Cookie 字段名，可不改 theme: \"default\" ` file6.WriteString(data) file6.Close() 这样就相当于可以直接嵌入文件 为了使数据持久话，我们需要添加volume,fly提供3g免费空间，我们新建一个g就行，fly volumes create nz_data --region hkg --size 1 运行fly launch 生成fly.toml文件，修改成 # fly.toml file generated for nz on 2022-02-07T02:08:50+08:00 app = \"nz\" kill_signal = \"SIGINT\" kill_timeout = 5 processes = [] [env] [experimental] allowed_public_ports = [] auto_rollback = true [mounts] destination = \"/dashboard/data\" source = \"nz_data\" [[services]] http_checks = [] internal_port = 80 processes = [\"app\"] protocol = \"tcp\" script_checks = [] [services.concurrency] hard_limit = 25 soft_limit = 20 type = \"connections\" [[services.ports]] handlers = [\"http\"] port = 80 [[services.ports]] handlers = [\"tls\", \"http\"] port = 443 [[services.tcp_checks]] grace_period = \"1s\" interval = \"15s\" restart_limit = 0 timeout = \"2s\" [[services]] http_checks = [] internal_port = 5555 processes = [\"app\"] protocol = \"tcp\" script_checks = [] [services.concurrency] hard_limit = 25 soft_limit = 20 type = \"connections\" [[services.ports]] port = 5555 [[services.tcp_checks]] grace_period = \"1s\" interval = \"15s\" restart_limit = 0 timeout = \"2s\" 具体意思可以去fly文档看，文档还是非常详细的 运行fly deploy部署app，他会自动把你代码打包成docker镜像上传 大功告成，接下来你就可以去控制台看部署的结果了 演示站 ","date":"2022-02-07","objectID":"/posts/cloud/fly/:2:0","tags":["白嫖","cloud","PaaS"],"title":"Fly.io 免费PaaS平台，以及哪吒面板的部署","uri":"/posts/cloud/fly/"},{"categories":null,"content":"优点 不怕宕机 白嫖党狂喜 ","date":"2022-02-07","objectID":"/posts/cloud/fly/:2:1","tags":["白嫖","cloud","PaaS"],"title":"Fly.io 免费PaaS平台，以及哪吒面板的部署","uri":"/posts/cloud/fly/"},{"categories":null,"content":"缺点 很难更新 备份或者迁移很难 ","date":"2022-02-07","objectID":"/posts/cloud/fly/:2:2","tags":["白嫖","cloud","PaaS"],"title":"Fly.io 免费PaaS平台，以及哪吒面板的部署","uri":"/posts/cloud/fly/"},{"categories":null,"content":"后记 fly.io 也是我最近才刚刚发现的，不知道能不能长久，也不知道有没有大厂背书。所以稳定性还有待观察 注册fly是要用信用卡的，一般的卡都能过，会交易10美元，所以卡里面最好大于10美元，啥卡都行，没卡的去微信搞个易呗卡 虽说是部署在香港的，但是ipv4解析到的地方是英国，所以访问速度不是很快，ipv6解到的是新加坡 ","date":"2022-02-07","objectID":"/posts/cloud/fly/:3:0","tags":["白嫖","cloud","PaaS"],"title":"Fly.io 免费PaaS平台，以及哪吒面板的部署","uri":"/posts/cloud/fly/"},{"categories":null,"content":"参考文献 https://liusy.eu.org/tag/fly-io/ https://dnslin.com/index.php/archives/37.html https://blog.kermsite.com/p/flyio/ ","date":"2022-02-07","objectID":"/posts/cloud/fly/:4:0","tags":["白嫖","cloud","PaaS"],"title":"Fly.io 免费PaaS平台，以及哪吒面板的部署","uri":"/posts/cloud/fly/"},{"categories":null,"content":"安装 #deb curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.15.2-amd64.deb sudo dpkg -i filebeat-7.15.2-amd64.deb #rpm curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.15.2-x86_64.rpm sudo rpm -vi filebeat-7.15.2-x86_64.rpm ","date":"2021-10-21","objectID":"/posts/elastic/filebeat/:1:0","tags":["devops"],"title":"filebeat","uri":"/posts/elastic/filebeat/"},{"categories":null,"content":"设置 路径： /var/filebeat/filebeat.yml output.elasticsearch:hosts:[\"myEShost:9200\"]username:\"filebeat_internal\"password:\"YOUR_PASSWORD\"setup.kibana:host:\"mykibanahost:5601\"username:\"my_kibana_user\"password:\"{pwd}\"","date":"2021-10-21","objectID":"/posts/elastic/filebeat/:2:0","tags":["devops"],"title":"filebeat","uri":"/posts/elastic/filebeat/"},{"categories":null,"content":"模块配置 可用模块 filebeat modules list 开启模块 filebeat modules enable system nginx mysql 模块设置路径 ： /var/filebeat/modules.d/ ","date":"2021-10-21","objectID":"/posts/elastic/filebeat/:3:0","tags":["devops"],"title":"filebeat","uri":"/posts/elastic/filebeat/"},{"categories":null,"content":"启动 验证服务 filebeat setup -e 验证完可用后，后台启动 sudo service filebeat start ","date":"2021-10-21","objectID":"/posts/elastic/filebeat/:4:0","tags":["devops"],"title":"filebeat","uri":"/posts/elastic/filebeat/"},{"categories":null,"content":"GOVER=1.17.2 wget golang.google.cn/dl/go${GOVER}.linux-amd64.tar.gz tar -xzf go${GOVER}.linux-amd64.tar.gz mv ./go /usr/local/go echo \"export PATH=$PATH:/usr/local/go/bin\" \u003e\u003e /etc/profile source /etc/profile rm golang.google.cn/dl/go${GOVER}.linux-amd64.tar.gz go env -w GOPROXY=https://mirrors.cloud.tencent.com/go/ go env -w GOPROXY=http://mirrors.tencentyun.com/go/ export GOPROXY=http://mirrors.tencentyun.com/go/ ","date":"2021-10-21","objectID":"/posts/go/%E5%AE%89%E8%A3%85/:0:0","tags":["Go"],"title":"go安装","uri":"/posts/go/%E5%AE%89%E8%A3%85/"},{"categories":null,"content":"go提供了一个http包，可以通过这个包方便的进行http请求 import ( \"fmt\" \"io/ioutil\" \"net/http\" \"strings\" ) // http.Get func httpGet() { resp, err := http.Get(\"http://www.baidu.com\") if err != nil { fmt.Println(err) return } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) fmt.Println(string(body)) } func httpPost() { resp, err := http.Post(\"http://www.baidu.com\", \"application/x-www-form-urlencode\", strings.NewReader(\"name=abc\")) // Content-Type post请求必须设置 if err != nil { return } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) fmt.Println(string(body)) } client := \u0026http.Client{} req, err := http.NewRequest(\"POST\", \"http://121.36.71.167:7001/\", strings.NewReader(\"name=cjb\")) if err != nil { fmt.Println(err) } req.Header.Set(\"Content-Type\", \"application/json\") req.Header.Set(\"Cookie\", \"name=anny\") resp, err := client.Do(req) if err != nil { fmt.Println(err) } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) if err != nil { fmt.Println(err) } fmt.Println(string(body)) ","date":"2021-10-21","objectID":"/posts/go/%E8%AF%B7%E6%B1%82-http/:0:0","tags":["Go"],"title":"go请求http","uri":"/posts/go/%E8%AF%B7%E6%B1%82-http/"},{"categories":null,"content":"概述 fetch()的功能与 XMLHttpRequest 基本相同，但有三个主要的差异。 （1）fetch()使用 Promise，不使用回调函数，因此大大简化了写法，写起来更简洁。 （2）fetch()采用模块化设计，API 分散在多个对象上（Response 对象、Request 对象、Headers 对象），更合理一些；相比之下，XMLHttpRequest 的 API 设计并不是很好，输入、输出、状态都在同一个接口管理，容易写出非常混乱的代码。 （3）fetch()通过数据流（Stream 对象）处理数据，可以分块读取，有利于提高网站性能表现，减少内存占用，对于请求大文件或者网速慢的场景相当有用。XMLHTTPRequest 对象不支持数据流，所有的数据必须放在缓存里，不支持分块读取，必须等待全部拿到后，再一次性吐出来。 在用法上，fetch()接受一个 URL 字符串作为参数，默认向该网址发出 GET 请求，返回一个 Promise 对象。它的基本用法如下。 fetch(url) .then(...) .catch(...) 下面是一个例子，从服务器获取 JSON 数据。 fetch('https://api.github.com/users/ruanyf') .then(response =\u003e response.json()) .then(json =\u003e console.log(json)) .catch(err =\u003e console.log('Request Failed', err)); async function fetchText() { let response = await fetch('/readme.txt'); console.log(response.status); console.log(response.statusText); } ","date":"2021-10-21","objectID":"/posts/fetch/:1:0","tags":["前端"],"title":"webApi fetch使用","uri":"/posts/fetch/"},{"categories":null,"content":"2.3 Response.headers 属性 Response 对象还有一个Response.headers属性，指向一个 Headers 对象，对应 HTTP 回应的所有标头。 Headers 对象可以使用for…of循环进行遍历。 ","date":"2021-10-21","objectID":"/posts/fetch/:1:1","tags":["前端"],"title":"webApi fetch使用","uri":"/posts/fetch/"},{"categories":null,"content":"2.4 读取内容的方法 Response对象根据服务器返回的不同类型的数据，提供了不同的读取方法。 response.text()：得到文本字符串。response.json()：得到 JSON 对象。response.blob()：得到二进制 Blob 对象。response.formData()：得到 FormData 表单对象。response.arrayBuffer()：得到二进制 ArrayBuffer 对象。 上面5个读取方法都是异步的，返回的都是 Promise 对象。必须等到异步操作结束，才能得到服务器返回的完整数据。 response.text()可以用于获取文本数据，比如 HTML 文件。 response.json()直接解析json response.formData()主要用在 Service Worker 里面，拦截用户提交的表单，修改某些数据以后，再提交给服务器。 response.blob()用于获取二进制文件。 const response = await fetch('flower.jpg'); const myBlob = await response.blob(); const objectURL = URL.createObjectURL(myBlob); const myImage = document.querySelector('img'); myImage.src = objectURL; 上面示例读取图片文件flower.jpg，显示在网页上。 ","date":"2021-10-21","objectID":"/posts/fetch/:1:2","tags":["前端"],"title":"webApi fetch使用","uri":"/posts/fetch/"},{"categories":null,"content":"POST 请求 const response = await fetch(url, { method: 'POST', headers: { \"Content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\", }, body: 'foo=bar\u0026lorem=ipsum', }); const json = await response.json(); const user = { name: 'John', surname: 'Smith' }; const response = await fetch('/article/fetch/post/user', { method: 'POST', headers: { 'Content-Type': 'application/json;charset=utf-8' }, body: JSON.stringify(user) }); 上面示例中，配置对象用到了三个属性。 method：HTTP 请求的方法，POST、DELETE、PUT都在这个属性设置。headers：一个对象，用来定制 HTTP 请求的标头。body：POST 请求的数据体。 注意，有些标头不能通过headers属性设置，比如Content-Length、Cookie、Host等等。它们是由浏览器自动生成，无法修改。 ","date":"2021-10-21","objectID":"/posts/fetch/:2:0","tags":["前端"],"title":"webApi fetch使用","uri":"/posts/fetch/"},{"categories":null,"content":"（4）文件上传 如果表单里面有文件选择器，可以用前一个例子的写法，上传的文件包含在整个表单里面，一起提交。 另一种方法是用脚本添加文件，构造出一个表单，进行上传，请看下面的例子。 const input = document.querySelector('input[type=\"file\"]'); const data = new FormData(); data.append('file', input.files[0]); data.append('user', 'foo'); fetch('/avatars', { method: 'POST', body: data }); 上传二进制文件时，不用修改标头的Content-Type，浏览器会自动设置。 ","date":"2021-10-21","objectID":"/posts/fetch/:2:1","tags":["前端"],"title":"webApi fetch使用","uri":"/posts/fetch/"},{"categories":null,"content":"（5）直接上传二进制数据 fetch()也可以直接上传二进制数据，将 Blob 或 arrayBuffer 数据放在body属性里面。 let blob = await new Promise(resolve =\u003e canvasElem.toBlob(resolve, 'image/png') ); let response = await fetch('/article/fetch/post/image', { method: 'POST', body: blob }); ```js ","date":"2021-10-21","objectID":"/posts/fetch/:2:2","tags":["前端"],"title":"webApi fetch使用","uri":"/posts/fetch/"},{"categories":null,"content":"基本原理和配置 wireguard会新建一张虚拟网卡，所有的流量都经过这个网卡，所以你要设定的主要有3块东西 服务器公网地址 v6 || v4 服务端网段 \u0026\u0026 ip 客户端网段 \u0026\u0026 ip ","date":"2021-10-21","objectID":"/posts/wireguard/:0:1","tags":null,"title":"wireguard安装","uri":"/posts/wireguard/"},{"categories":null,"content":"安装脚本 curl -O https://raw.githubusercontent.com/angristan/wireguard-install/master/wireguard-install.sh chmod +x wireguard-install.sh ./wireguard-install.sh # 国内版 curl -O https://raw.fastgit.org/angristan/wireguard-install/master/wireguard-install.sh chmod +x wireguard-install.sh ./wireguard-install.sh ","date":"2021-10-21","objectID":"/posts/wireguard/:0:2","tags":null,"title":"wireguard安装","uri":"/posts/wireguard/"},{"categories":null,"content":"一、gitmodules是什么 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。 ","date":"2021-09-21","objectID":"/posts/gitmodules%E8%AF%A6%E8%A7%A3git%E5%AD%90%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE/:1:0","tags":["git","code"],"title":"gitmodules详解（Git子模块配置）","uri":"/posts/gitmodules%E8%AF%A6%E8%A7%A3git%E5%AD%90%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE/"},{"categories":null,"content":"如何使用 $ git submodule add https://github.com/XXX .gitmodules文件 [submodule \"themes/ananke\"] path = themes/ananke url = https://github.com/theNewDynamic/gohugo-theme-ananke.git [submodule \"themes/even\"] path = themes/even url = https://github.com/olOwOlo/hugo-theme-even.git ","date":"2021-09-21","objectID":"/posts/gitmodules%E8%AF%A6%E8%A7%A3git%E5%AD%90%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE/:2:0","tags":["git","code"],"title":"gitmodules详解（Git子模块配置）","uri":"/posts/gitmodules%E8%AF%A6%E8%A7%A3git%E5%AD%90%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE/"},{"categories":["life"],"content":"1.安装浏览器 点击下载 下载完成后安装 ","date":"2021-09-21","objectID":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E6%89%8B%E6%9C%BA%E7%89%88/:1:0","tags":["学习通"],"title":"学习通脚本安装（手机版）","uri":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E6%89%8B%E6%9C%BA%E7%89%88/"},{"categories":["life"],"content":"2.安装油猴 打开浏览器，跟图走 ","date":"2021-09-21","objectID":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E6%89%8B%E6%9C%BA%E7%89%88/:2:0","tags":["学习通"],"title":"学习通脚本安装（手机版）","uri":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E6%89%8B%E6%9C%BA%E7%89%88/"},{"categories":["life"],"content":"3.安装脚本 在此浏览器内打开 http://ti.fakev.cn/scripts 点击安装脚本 ","date":"2021-09-21","objectID":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E6%89%8B%E6%9C%BA%E7%89%88/:3:0","tags":["学习通"],"title":"学习通脚本安装（手机版）","uri":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E6%89%8B%E6%9C%BA%E7%89%88/"},{"categories":["life"],"content":"4.检查安装 打开 http://chaoxing.com 登录 打开一个课程，如果出现查题面板即安装成功 ","date":"2021-09-21","objectID":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E6%89%8B%E6%9C%BA%E7%89%88/:4:0","tags":["学习通"],"title":"学习通脚本安装（手机版）","uri":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E6%89%8B%E6%9C%BA%E7%89%88/"},{"categories":["life"],"content":"一、浏览器选择 推荐使用edge，如果是chrome要科网 ","date":"2021-09-21","objectID":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E7%94%B5%E8%84%91%E7%89%88/:1:0","tags":["学习通"],"title":"学习通脚本安装（电脑版）","uri":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E7%94%B5%E8%84%91%E7%89%88/"},{"categories":["life"],"content":"二、安装油猴 打开 https://microsoftedge.microsoft.com/addons/detail/iikmkjmpaadaobahmlepeloendndfphd?hl=zh-CN（edge） https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=zh-CN (chrome) 点击安装拓展 ","date":"2021-09-21","objectID":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E7%94%B5%E8%84%91%E7%89%88/:2:0","tags":["学习通"],"title":"学习通脚本安装（电脑版）","uri":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E7%94%B5%E8%84%91%E7%89%88/"},{"categories":["life"],"content":"三、安装脚本 打开 http://ti.fakev.cn/script 点击安装脚本 ","date":"2021-09-21","objectID":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E7%94%B5%E8%84%91%E7%89%88/:3:0","tags":["学习通"],"title":"学习通脚本安装（电脑版）","uri":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E7%94%B5%E8%84%91%E7%89%88/"},{"categories":["life"],"content":"四、检查安装 打开油猴管理面板，确保当前只有一个网课脚本打开 随便打开一个课程，记得要打开《学生学习页面》像https://mooc1-1.chaoxing.com/mycourse/studentstudy这样，脚本会自动启动，遇到题目会自动答题，遇到视频会自动播放 视频可以开倍速拉进度条，不过不建议， ","date":"2021-09-21","objectID":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E7%94%B5%E8%84%91%E7%89%88/:4:0","tags":["学习通"],"title":"学习通脚本安装（电脑版）","uri":"/posts/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E7%94%B5%E8%84%91%E7%89%88/"}]